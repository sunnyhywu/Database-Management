show databases;

use dbmscourse;

SELECT
P_CODE, P_DESCRIPT, P_PRICE, V_NAME
FROM PRODUCT, VENDOR
WHERE PRODUCT.V_CODE = VENDOR.V_CODE;

SELECT
    COUNT(*) FROM INVOICE;

SELECT COUNT(*) FROM LINE;

SELECT COUNT(*) FROM INVOICE CROSS JOIN LINE ;

SELECT COUNT(*) FROM INVOICE,LINE;

desc INVOICE;

desc LINE;

SELECT INVOICE.INV_NUMBER, CUS_CODE, INV_DATE, P_CODE
FROM INVOICE CROSS JOIN LINE;

SELECT INVOICE.INV_NUMBER, CUS_CODE, INV_DATE, P_CODE
FROM INVOICE, LINE;

desc CUSTOMER;

DESC INVOICE;

SELECT *
FROM CUSTOMER NATURAL JOIN INVOICE;

SELECT CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE
FROM CUSTOMER NATURAL JOIN INVOICE;

SELECT CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE
FROM CUSTOMER NATURAL JOIN INVOICE;

SELECT CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE
FROM CUSTOMER NATURAL JOIN INVOICE;

desc LINE;

desc PRODUCT;

desc INVOICE;

SELECT INV_NUMBER, P_CODE, P_DESCRIPT, LINE_UNITS, LINE_PRICE
FROM INVOICE NATURAL JOIN LINE NATURAL JOIN PRODUCT;

SELECT CUSTOMER.CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE
FROM CUSTOMER, INVOICE
WHERE CUSTOMER.CUS_CODE = INVOICE.CUS_CODE;

SELECT CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE
FROM CUSTOMER NATURAL JOIN INVOICE;

SELECT INV_NUMBER, P_CODE, P_DESCRIPT, LINE_UNITS, LINE_PRICE
FROM INVOICE JOIN LINE USING (INV_NUMBER) JOIN PRODUCT USING (P_CODE);

SELECT INV_NUMBER, P_CODE, P_DESCRIPT, LINE_UNITS, LINE_PRICE
FROM INVOICE  NATURAL JOIN LINE NATURAL JOIN PRODUCT;


/* 25 line*/
SELECT INVOICE.INV_NUMBER, PRODUCT.P_CODE, P_DESCRIPT, LINE_UNITS, LINE_PRICE
FROM INVOICE JOIN LINE ON INVOICE.INV_NUMBER = LINE.INV_NUMBER JOIN PRODUCT ON LINE.P_CODE = PRODUCT.P_CODE;

SELECT E.EMP_MGR, M.EMP_LNAME, E.EMP_NUM, E.EMP_LNAME
FROM EMP E JOIN EMP M ON E.EMP_MGR = M.EMP_NUM
ORDER BY E.EMP_MGR;


SELECT * FROM VENDOR;
SELECT * FROM PRODUCT;

SELECT COUNT(DISTINCT V_CODE) FROM PRODUCT

SELECT VENDOR.V_CODE, V_NAME, P_CODE 
FROM VENDOR LEFT JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE;

SELECT VENDOR.V_CODE, V_NAME, P_CODE 
FROM VENDOR NATURAL JOIN PRODUCT ;

SELECT VENDOR.V_CODE, V_NAME, P_CODE 
FROM VENDOR JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE;

SELECT P_CODE, VENDOR.V_CODE, V_NAME
FROM VENDOR JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE;

SELECT P_CODE, VENDOR.V_CODE, V_NAME
FROM VENDOR RIGHT JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE;

SELECT P_CODE, VENDOR.V_CODE, V_NAME
FROM VENDOR FULL JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE;
/* Note: Oracle and MS SQL Server support the FULL JOIN syntax. MySQL and Access do not.
You can't do a full outer join in MySQL, so just run it as the UNION of a LEFT JOIN and a RIGHT JOIN as*/


SELECT P_CODE, VENDOR.V_CODE, V_NAME
FROM VENDOR LEFT JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE
UNION
SELECT P_CODE, VENDOR.V_CODE, V_NAME
FROM VENDOR RIGHT JOIN PRODUCT ON VENDOR.V_CODE = PRODUCT.V_CODE;

SELECT INV_NUMBER, INVOICE.CUS_CODE, CUS_LNAME, CUS_FNAME
FROM CUSTOMER, INVOICE
WHERE CUSTOMER.CUS_CODE = INVOICE.CUS_CODE;

SELECT V_CODE, V_NAME FROM VENDOR
WHERE V_CODE NOT IN (SELECT V_CODE FROM PRODUCT WHERE V_CODE IS NOT NULL);

SELECT V_CODE FROM PRODUCT WHERE V_CODE IS NOT NULL;

SELECT DISTINCT V_CODE FROM PRODUCT WHERE V_CODE IS NOT NULL;

SELECT * FROM PRODUCT WHERE V_CODE = 21226;

SELECT AVG(P_PRICE) FROM PRODUCT;

SELECT P_CODE, P_PRICE FROM PRODUCT
WHERE P_PRICE >= 57.710625;

SELECT P_CODE, P_PRICE FROM PRODUCT
WHERE P_PRICE >= (SELECT AVG(P_PRICE) FROM PRODUCT);

SELECT
DISTINCT CUS_CODE, CUS_LNAME, CUS_FNAME
FROM CUSTOMER JOIN INVOICE USING (CUS_CODE)
              JOIN LINE USING (INV_NUMBER)
              JOIN PRODUCT USING (P_CODE)
WHERE P_CODE = (SELECT P_CODE FROM PRODUCT WHERE P_DESCRIPT = 'Claw hammer');

SELECT P_CODE FROM PRODUCT WHERE P_DESCRIPT = 'Claw hammer';

SELECT DISTINCT CUS_CODE, CUS_LNAME, CUS_FNAME
FROM CUSTOMER JOIN INVOICE USING (CUS_CODE)
              JOIN LINE USING (INV_NUMBER)
              JOIN PRODUCT USING (P_CODE)
WHERE P_DESCRIPT = 'Claw hammer';
/* If the original query encounters the “Claw hammer” string in more than one product description, you get an error message.*/

SELECT DISTINCT CUS_CODE, CUS_LNAME, CUS_FNAME, P_CODE
FROM CUSTOMER JOIN INVOICE USING (CUS_CODE)
              JOIN LINE USING (INV_NUMBER)
              JOIN PRODUCT USING (P_CODE)
WHERE P_CODE IN (SELECT P_CODE 
                 FROM PRODUCT
                 WHERE P_DESCRIPT LIKE '%hammer%'
                OR P_DESCRIPT LIKE '%saw%');

SELECT P_CODE 
FROM PRODUCT
WHERE P_DESCRIPT LIKE '%hammer%'
    OR P_DESCRIPT LIKE '%saw%';

SELECT DISTINCT CUS_CODE, CUS_LNAME, CUS_FNAME, P_CODE
FROM CUSTOMER JOIN INVOICE USING (CUS_CODE)
              JOIN LINE USING (INV_NUMBER)
              JOIN PRODUCT USING (P_CODE)
WHERE P_DESCRIPT LIKE '%hammer%'
    OR P_DESCRIPT LIKE '%saw%';

SELECT P_CODE, SUM(LINE_UNITS) 
FROM LINE
GROUP BY P_CODE
HAVING SUM(LINE_UNITS) > (SELECT AVG(LINE_UNITS) FROM LINE);

SELECT AVG(LINE_UNITS) FROM LINE;

SELECT P_CODE, P_QOH * P_PRICE
FROM PRODUCT
WHERE P_QOH * P_PRICE > ALL(SELECT (P_QOH * P_PRICE) 
                             FROM PRODUCT WHERE V_CODE IN (SELECT V_CODE FROM VENDOR WHERE V_STATE = 'FL'));

SELECT P_QOH * P_PRICE
FROM PRODUCT
WHERE V_CODE IN (SELECT V_CODE FROM VENDOR WHERE V_STATE = 'FL');

SELECT DISTINCT CUSTOMER.CUS_CODE, CUSTOMER.CUS_LNAME
FROM CUSTOMER, (SELECT INVOICE.CUS_CODE FROM INVOICE NATURAL JOIN LINE
                WHERE P_CODE = '13-Q2/P2') CP1,
               (SELECT INVOICE.CUS_CODE FROM INVOICE NATURAL JOIN LINE
                WHERE P_CODE = '23109-HB') CP2
WHERE CUSTOMER.CUS_CODE = CP1.CUS_CODE AND CP1.CUS_CODE = CP2.CUS_CODE;

SELECT INVOICE.CUS_CODE FROM INVOICE NATURAL JOIN LINE
WHERE P_CODE = '13-Q2/P2';

SELECT INVOICE.CUS_CODE FROM INVOICE NATURAL JOIN LINE
WHERE P_CODE = '23109-HB';

(SELECT INVOICE.CUS_CODE FROM INVOICE NATURAL JOIN LINE
WHERE P_CODE = '13-Q2/P2')
INTERSECT
(SELECT INVOICE.CUS_CODE FROM INVOICE NATURAL JOIN LINE
WHERE P_CODE = '23109-HB')

SELECT P_CODE, P_PRICE, (SELECT AVG(P_PRICE) FROM PRODUCT) AS AVGPRICE,
       P_PRICE - (SELECT AVG(P_PRICE) FROM PRODUCT) AS DIFF
FROM PRODUCT;

SELECT P_CODE, SUM(LINE_UNITS * LINE_PRICE) AS SALES,
      (SELECT COUNT(*) FROM EMPLOYEE) AS ECOUNT, 
      SUM(LINE_UNITS * LINE_PRICE)/(SELECT COUNT(*) FROM EMPLOYEE) AS CONTRIB
FROM LINE
GROUP BY P_CODE;

/* a correlated subquery is a subquery that executes once for each row in the outer query. 
The process is similar to the typical nested loop in a programming language.*/

SELECT INV_NUMBER, LINE_NUMBER, P_CODE, LINE_UNITS
FROM LINE LS
WHERE LS.LINE_UNITS > (SELECT AVG(LINE_UNITS)
                       FROM LINE LA
                       WHERE LA.P_CODE = LS.P_CODE);

SELECT INV_NUMBER, LINE_NUMBER, P_CODE, LINE_UNITS
FROM LINE LS;

SELECT AVG(LINE_UNITS)
FROM LINE LA
WHERE LA.P_CODE = '13-Q2/P2';

SELECT AVG(LINE_UNITS)
FROM LINE LA
WHERE LA.P_CODE = '54778-2T';
/* note that the LINE table is used more than once, so you must use table aliases. 
In this case, the inner query computes the average units sold of the product that matches the P_CODE of the outer query P_CODE. 
That is, the inner query runs once, using the first product code found in the outer LINE table, and returns the average sale for that product. 
When the number of units sold in the outer LINE row is greater than the average computed, the row is added to the output. 
Then the inner query runs again, this time using the second product code found in the outer LINE table. 
The process repeats until the inner query has run for all rows in the outer LINE table. In this case, 
the inner query will be repeated as many times as there are rows in the outer query.

To verify the results and to provide an example of how you can combine subqueries, 
you can add a correlated inline subquery to the previous query.*/

SELECT INV_NUMBER, P_CODE, LINE_UNITS, (SELECT AVG(LINE_UNITS)
                                        FROM LINE LA
                                        WHERE LA.P_CODE = LS.P_CODE) AS AVG
FROM LINE LS
WHERE LS.LINE_UNITS > (SELECT AVG(LINE_UNITS)
                       FROM LINE LA
                       WHERE LA.P_CODE = LS.P_CODE);

SELECT CUS_CODE, CUS_LNAME, CUS_FNAME
FROM CUSTOMER
WHERE EXISTS (SELECT CUS_CODE 
              FROM INVOICE
              WHERE INVOICE.CUS_CODE = CUSTOMER.CUS_CODE);

SELECT *
FROM CUSTOMER
NATURAL JOIN INVOICE;

SELECT DISTINCT CUS_CODE, CUS_LNAME, CUS_FNAME
FROM CUSTOMER
NATURAL JOIN INVOICE;

DESC PRODUCT;

DESC VENDOR;

SELECT V_CODE, V_NAME
FROM VENDOR
WHERE EXISTS (SELECT *
              FROM PRODUCT
              WHERE P_QOH < P_MIN * 2
              AND VENDOR.V_CODE = PRODUCT.V_CODE);

SELECT * FROM VENDOR;

SELECT * FROM VENDOR
NATURAL JOIN PRODUCT;

SELECT V_CODE, V_NAME 
FROM VENDOR
NATURAL JOIN PRODUCT
WHERE PRODUCT.P_QOH < 2*PRODUCT.P_MIN;

SELECT DISTINCT V_CODE, V_NAME 
FROM VENDOR
NATURAL JOIN PRODUCT
WHERE PRODUCT.P_QOH < 2*PRODUCT.P_MIN;
